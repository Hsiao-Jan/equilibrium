// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/kowala-tech/equilibrium/common/hexutil"
)

var _ = (*headerMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (h Header) MarshalJSON() ([]byte, error) {
	type Header struct {
		Number                *hexutil.Big  `json:"number"    gencodec:"required"`
		ParentHash            Hash          `json:"parentHash"     gencodec:"required"`
		Extra                 hexutil.Bytes `json:"extraData" gencodec:"required"`
		Time                  *hexutil.Big  `json:"timestamp"      gencodec:"required"`
		Proposer              Address       `json:"proposer"       gencodec:"required"`
		LastCommitHash        Hash          `json:"lastCommitRoot" gencodec:"required"`
		ProtocolViolationHash Hash          `json:"violationsHash" gencodec:"required"`
		Root                  Hash          `json:"stateRoot"      gencodec:"required"`
		TxHash                Hash          `json:"transactionsRoot" gencodec:"required"`
		ReceiptHash           Hash          `json:"receiptHash"      gencodec:"required"`
		Bloom                 Bloom         `json:"logsBloom"        gencodec:"required"`
		Hash                  Hash          `json:"hash"`
	}
	var enc Header
	enc.Number = (*hexutil.Big)(h.Number)
	enc.ParentHash = h.ParentHash
	enc.Extra = h.Extra
	enc.Time = (*hexutil.Big)(h.Time)
	enc.Proposer = h.Proposer
	enc.LastCommitHash = h.LastCommitHash
	enc.ProtocolViolationHash = h.ProtocolViolationHash
	enc.Root = h.Root
	enc.TxHash = h.TxHash
	enc.ReceiptHash = h.ReceiptHash
	enc.Bloom = h.Bloom
	enc.Hash = h.Hash()
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (h *Header) UnmarshalJSON(input []byte) error {
	type Header struct {
		Number                *hexutil.Big   `json:"number"    gencodec:"required"`
		ParentHash            *Hash          `json:"parentHash"     gencodec:"required"`
		Extra                 *hexutil.Bytes `json:"extraData" gencodec:"required"`
		Time                  *hexutil.Big   `json:"timestamp"      gencodec:"required"`
		Proposer              *Address       `json:"proposer"       gencodec:"required"`
		LastCommitHash        *Hash          `json:"lastCommitRoot" gencodec:"required"`
		ProtocolViolationHash *Hash          `json:"violationsHash" gencodec:"required"`
		Root                  *Hash          `json:"stateRoot"      gencodec:"required"`
		TxHash                *Hash          `json:"transactionsRoot" gencodec:"required"`
		ReceiptHash           *Hash          `json:"receiptHash"      gencodec:"required"`
		Bloom                 *Bloom         `json:"logsBloom"        gencodec:"required"`
	}
	var dec Header
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Number == nil {
		return errors.New("missing required field 'number' for Header")
	}
	h.Number = (*big.Int)(dec.Number)
	if dec.ParentHash == nil {
		return errors.New("missing required field 'parentHash' for Header")
	}
	h.ParentHash = *dec.ParentHash
	if dec.Extra == nil {
		return errors.New("missing required field 'extraData' for Header")
	}
	h.Extra = *dec.Extra
	if dec.Time == nil {
		return errors.New("missing required field 'timestamp' for Header")
	}
	h.Time = (*big.Int)(dec.Time)
	if dec.Proposer == nil {
		return errors.New("missing required field 'proposer' for Header")
	}
	h.Proposer = *dec.Proposer
	if dec.LastCommitHash == nil {
		return errors.New("missing required field 'lastCommitRoot' for Header")
	}
	h.LastCommitHash = *dec.LastCommitHash
	if dec.ProtocolViolationHash == nil {
		return errors.New("missing required field 'violationsHash' for Header")
	}
	h.ProtocolViolationHash = *dec.ProtocolViolationHash
	if dec.Root == nil {
		return errors.New("missing required field 'stateRoot' for Header")
	}
	h.Root = *dec.Root
	if dec.TxHash == nil {
		return errors.New("missing required field 'transactionsRoot' for Header")
	}
	h.TxHash = *dec.TxHash
	if dec.ReceiptHash == nil {
		return errors.New("missing required field 'receiptHash' for Header")
	}
	h.ReceiptHash = *dec.ReceiptHash
	if dec.Bloom == nil {
		return errors.New("missing required field 'logsBloom' for Header")
	}
	h.Bloom = *dec.Bloom
	return nil
}
